version: "3.1"

services:

  redis:
    image: redis:3.0.7-alpine
    environment:
      - TZ=Europe/Paris
    networks:
      - front-tier
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

  postgres:
    image: postgres:9.6-alpine
    environment:
      - POSTGRES_USER=postgres
      - TZ=Europe/Paris
    volumes:
      - "db-data:/var/lib/postgresql/data"
    networks:
      - back-tier
    deploy:
      placement:
        constraints: [node.role == manager]

  vote:
    image: "vertxswarm/verticle-vote:1.0.0-RELEASE"
    environment:
      - TZ=Europe/Paris
    depends_on:
      - redis
    networks:
      - front-tier
      - traefik-net
    deploy:
      placement:
        constraints: [node.role != manager]
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      labels:
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:vote.traefik"
        - "traefik.port=8080"

  result:
    image: "vertxswarm/verticle-result:1.0.0-RELEASE"
    environment:
      - TZ=Europe/Paris
    depends_on:
      - postgres
    networks:
      - back-tier
      - traefik-net
    deploy:
      labels:
        - "traefik.docker.network=traefik-net"
        - "traefik.frontend.rule=Host:result.traefik"
        - "traefik.port=8081"
        #- "traefik.frontend.rule=Host:result.traefik"
      placement:
        constraints: [node.role != manager]
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3

  worker:
    image: "vertxswarm/verticle-worker:latest"
    environment:
      - TZ=Europe/Paris
    depends_on:
      - postgres
      - redis
    networks:
      - front-tier
      - back-tier
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3

  visualizer:
    image: dockersamples/visualizer:latest
    ports:
      - 5000:8080
    stop_grace_period: 5s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

  portainer:
    image: portainer/portainer
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer-data:/data"
    command: --no-auth
    deploy:
      labels:
        - "traefik.port=9000"
      placement:
        constraints: [node.role == manager]

  whoami0:
    image: containous/whoami
    deploy:
      labels:
        - "traefik.port=80"
    networks:
      - traefik-net

volumes:
  db-data:
  portainer-data:

networks:
  front-tier:
  back-tier:
  traefik-net:
    external: true

